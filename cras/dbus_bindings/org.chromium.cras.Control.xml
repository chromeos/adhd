<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2021 The ChromiumOS Authors
  Use of this source code is governed by a BSD-style license that can be
  found in the LICENSE file.
-->
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"https://chromium.googlesource.com/chromiumos/third_party/adhd/+/refs/heads/main/cras/dbus_bindings/introspect.dtd">
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0">
  <interface name="org.chromium.cras.Control">
    <method name="SetOutputVolume">
      <tp:docstring>
        Sets the volume of the system.
      </tp:docstring>
      <arg name="volume" type="i" direction="in">
        <tp:docstring>
          Volume ranges from
          0 to 100, and will be translated to dB based on the
          output-specific volume curve.
        </tp:docstring>
      </arg>
    </method>

    <method name="SetOutputNodeVolume">
      <tp:docstring>
        Sets the volume of the given node.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
      <arg name="volume" type="i" direction="in">
        <tp:docstring>
          Volume ranges from
          0 to 100, and will be translated to dB based on the
          output-specific volume curve.
        </tp:docstring>
      </arg>
    </method>

    <method name="SwapLeftRight">
      <tp:docstring>
        Swap the left and right channel of the given node.
        Message will be dropped if this feature is not supported.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
      <arg name="swap" type="b" direction="in"/>
    </method>

    <method name="SetDisplayRotation">
      <tp:docstring>
        Set the display rotation state with the enum CRAS_SCREEN_ROTATION
        which is aligned with display::Display::Rotation in
        ui/display/display.h.
        Message will be dropped if this feature is not supported.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
      <arg name="rotation" type="u" direction="in"/>
    </method>

    <method name="SetOutputMute">
      <tp:docstring>
        Sets the system output mute.
      </tp:docstring>
      <arg name="mute_on" type="b" direction="in"/>
    </method>

    <method name="SetOutputUserMute">
      <tp:docstring>
        Sets the system output mute from user action.
      </tp:docstring>
      <arg name="mute_on" type="b" direction="in"/>
    </method>

    <method name="SetSuspendAudio">
      <arg name="suspend" type="b" direction="in"/>
    </method>

    <method name="SetInputNodeGain">
      <tp:docstring>
        Sets the capture gain of the node.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
      <arg name="gain" type="i" direction="in">
        <tp:docstring>
          gain is a 0-100 integer
          which linearly maps [0, 50] to range [-20dB, 0dB]
          and [50, 100] to [0dB, 20dB],
          Default gain value is 50, which is 0dB.
        </tp:docstring>
      </arg>
    </method>

    <method name="SetInputMute">
      <tp:docstring>
        Sets the capture mute state of the system.
        Recordings will be muted when this is set.
      </tp:docstring>
      <arg name="mute_on" type="b" direction="in"/>
    </method>

    <method name="GetVolumeState">
      <tp:docstring>
        Returns the volume and capture gain.
      </tp:docstring>
      <arg name="output_volume" type="i" direction="out">
        <tp:docstring>
          0-100
        </tp:docstring>
      </arg>
      <arg name="output_mute" type="b" direction="out"/>
      <arg name="input_mute" type="b" direction="out"/>
      <arg name="output_user_mute" type="b" direction="out"/>
    </method>

    <method name="GetDefaultOutputBufferSize">
      <tp:docstring>
        Returns the default output buffer size in frames.
      </tp:docstring>
      <arg name="buffer_size" type="i" direction="out"/>
    </method>

    <method name="GetNodes">
      <tp:docstring>
        Returns information about nodes. A node can be either
        output or input but not both. An output node is
        something like a speaker or a headphone, and an input
        node is like a microphone.  The return value is a
        sequence of dicts mapping from strings to variants
        (e.g. signature "a{sv}a{sv}" for two nodes).  Each dict
        contains information about a node.

        Each dict contains the following properties:
          boolean IsInput
            false for output nodes, true for input
            nodes.
          uint64 Id
            The id of this node. It is unique among
            all nodes including both output and
            input nodes.
          string Type
                  The type of this node. It can be one of
                  following values:
            /* for output nodes. */
            "INTERNAL_SPEAKER","HEADPHONE", "HDMI",
            /* for input nodes. */
            "INTERNAL_MIC", "MIC",
            /* for both output and input nodes. */
            "USB", "BLUETOOTH", "UNKNOWN",
          string Name
            The name of this node. For example,
            "Speaker" or "Internal Mic".
          string DeviceName
            The name of the device that this node
            belongs to. For example,
            "HDA Intel PCH: CA0132 Analog:0,0" or
            "Creative SB Arena Headset".
          uint64 StableDeviceId
            The stable ID does not change due to
            device plug/unplug or reboot.
          uint64 StableDeviceIdNew
            The new stable ID. Keeping both stable
            ID and stable ID new is for backward
            compatibility.
          uint32 DeviceLastOpenResult
            The last known result of opening the
            device.
            It is 0 for unknown, 1 for success and
            2 for failure.
          boolean Active
            Whether this node is currently used
            for output/input. There is one active
            node for output and one active node for
            input.
          uint64 PluggedTime
            The time that this device was plugged
            in. This value is in microseconds.
          uint64 NodeVolume
            The node volume indexed from 0 to 100.
          uint64 NodeCaptureGain
            The capture gain of node in dBFS * 100.
            It's not used by any clients.
          uint32 InputNodeGain
            The input node gain set by UI. Its value
            ranges from 0 to 100.
          string HotwordModels
            A string of comma-separated hotword
            language model locales supported by this
            node. e.g. "en_au,en_gb,en_us"
            The string is empty if the node type is
            not HOTWORD.
          uint32 NodeAudioEffect
            The support information of audio effects
            in bit-wise manner, which is defined by
            enum "audio_effect_type" in
            src/common/cras_iodev_info.h.
      </tp:docstring>
      <arg name="nodes" type="a{sv}" direction="out"/>
    </method>

    <method name="GetNodeInfos">
      <tp:docstring>
        Similar to GetNodes, but this one returns an array of
        dict and has signature "aa{sv}". Clients using
        chromeos-dbus-bindings should use this method instead of
        "GetNodes".
      </tp:docstring>
      <arg name="nodes" type="aa{sv}" direction="out"/>
    </method>

    <method name="GetSystemAecSupported">
      <tp:docstring>
        Returns 1 if system echo cancellation is supported,
        otherwise return 0.
      </tp:docstring>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="GetSystemAecGroupId">
      <arg name="group_id" type="i" direction="out"/>
    </method>

    <method name="GetSystemNsSupported">
      <tp:docstring>
        Returns 1 if system noise suppression is supported,
        otherwise return 0.
      </tp:docstring>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="GetSystemAgcSupported">
      <tp:docstring>
        Returns 1 if system automatic gain control is supported,
        otherwise return 0.
      </tp:docstring>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="GetFeatureFlagForTest">
      <tp:docstring>
        Returns the enabled status of the given feature as seen by CRAS.
        Test only.
      </tp:docstring>
      <arg name="feature" type="s" direction="in"/>
      <arg name="enabled" type="b" direction="out"/>
    </method>

    <method name="GetDeprioritizeBtWbsMic">
      <arg name="deprioritized" type="b" direction="out"/>
    </method>

    <method name="GetRtcRunning">
      <tp:docstring>
        Returns true if there are running RTC streams, otherwise
        return false.
      </tp:docstring>
      <arg name="deprioritized" type="b" direction="out"/>
    </method>

    <method name="SetActiveOutputNode">
      <tp:docstring>
        Requests the specified node to be used for
        output. If node_id is 0 (which is not a valid
        node id), cras will choose the active node
        automatically.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
    </method>

    <method name="SetActiveInputNode">
      <tp:docstring>
        Requests the specified node to be used for
        input. If node_id is 0 (which is not a valid
        node id), cras will choose the active node
        automatically.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
    </method>

    <method name="AddActiveInputNode">
      <arg name="node_id" type="t" direction="in"/>
    </method>

    <method name="AddActiveOutputNode">
      <arg name="node_id" type="t" direction="in"/>
    </method>

    <method name="RemoveActiveInputNode">
      <arg name="node_id" type="t" direction="in"/>
    </method>

    <method name="RemoveActiveOutputNode">
      <arg name="node_id" type="t" direction="in"/>
    </method>

    <method name="SetFixA2dpPacketSize">
      <arg name="toggle" type="b" direction="in"/>
    </method>

    <method name="GetNumberOfActiveStreams">
      <tp:docstring>
        Returns the number of streams currently being
        played or recorded.
      </tp:docstring>
      <arg name="num" type="i" direction="out"/>
    </method>

    <method name="GetNumberOfActiveOutputStreams">
      <tp:docstring>
        Returns the number of streams currently using output hardware.
      </tp:docstring>
      <arg name="num" type="i" direction="out"/>
    </method>

    <method name="GetNumberOfActiveInputStreams">
      <tp:docstring>
        Returns the number of streams currently using input hardware.
      </tp:docstring>
      <arg name="num" type="i" direction="out"/>
    </method>

    <method name="GetNumberOfInputStreamsWithPermission">
      <arg name="num" type="a{sv}" direction="out"/>
    </method>

    <method name="SetGlobalOutputChannelRemix">
      <tp:docstring>
        Sets the conversion matrix for global output channel
        remixing. The coefficient array represents an N * N
        conversion matrix M, where N is num_channels, with
        M[i][j] = coefficient[i * N + j].
        The remix is done by multiplying the conversion matrix
        to each N-channel PCM data, i.e M * [L, R] = [L', R']
        For example, coefficient [0.1, 0.9, 0.4, 0.6] will
        result in:
        L' = 0.1 * L + 0.9 * R
        R' = 0.4 * L + 0.6 * R
      </tp:docstring>
      <arg name="num_channels" type="i" direction="in"/>
      <arg name="coefficient" type="ad" direction="in"/>
    </method>

    <method name="SetHotwordModel">
      <tp:docstring>
        Set the hotword language model on the specified node.
        The node must have type HOTWORD and the model_name must
        be one of the supported locales returned by
        GetNodes() HotwordModels string.
        Returns 0 on success, or a negative errno on failure.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
      <arg name="model_name" type="s" direction="in"/>
    </method>

    <method name="IsAudioOutputActive">
      <tp:docstring>
        Returns 1 if there are currently any active output streams,
        excluding 'fake' streams that are not actually outputting any
        audio. Returns 0 if there are no active streams, or all active
        streams are 'fake' streams.
      </tp:docstring>
      <arg name="active" type="b" direction="out"/>
    </method>

    <method name="SetFlossEnabled">
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="SetWbsEnabled">
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="AreAudioEffectsReady">
      <arg name="ready" type="b" direction="out"/>
    </method>

    <method name="GetAudioEffectDlcs">
      <tp:docstring>
        Returns the audio effect dlcs that are expected to be installed on the
        device.
      </tp:docstring>
      <arg name="data" type="s" direction="out"/>
    </method>

    <method name="SetVoiceIsolationUIEnabled">
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="SetNoiseCancellationEnabled">
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="IsNoiseCancellationSupported">
      <tp:docstring>
        Tells whether the system can potentially support noise cancellation.
        Always returns true.

        TODO(b/281608407): Remove this function.
      </tp:docstring>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="SetStyleTransferEnabled">
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="IsStyleTransferSupported">
      <tp:docstring>
        Tells whether the system can potentially support style transfer.
      </tp:docstring>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="SetBypassBlockNoiseCancellation">
      <arg name="bypass" type="b" direction="in"/>
    </method>

    <method name="SetForceA2DPAdvancedCodecsEnabled">
      <tp:docstring>
        Set the force advanced codecs enabled state to `enabled`.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="GetForceA2DPAdvancedCodecsEnabled">
      <tp:docstring>
        Returns the state of the force advanced codecs enabled.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="enabled" type="b" direction="out"/>
    </method>

    <method name="SetForceHFPSwbEnabled">
      <tp:docstring>
        Set the force HFP SWB enabled state to `enabled`.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="GetForceHFPSwbEnabled">
      <tp:docstring>
        Returns the state of the force HFP SWB enabled.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="enabled" type="b" direction="out"/>
    </method>

    <method name="SetForceSrBtEnabled">
      <tp:docstring>
        Set the force sr bt enabled state to `enabled`.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="GetForceSrBtEnabled">
      <tp:docstring>
        Returns the state of the force sr bt enabled.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="enabled" type="b" direction="out"/>
    </method>

    <method name="SetHfpMicSrEnabled">
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="IsHfpMicSrSupported">
      <tp:docstring>
        Tells whether the system can potentially support hfp mic sr.
      </tp:docstring>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="SetPlayerPlaybackStatus">
      <arg name="status" type="s" direction="in"/>
    </method>

    <method name="SetPlayerIdentity">
      <arg name="identity" type="s" direction="in"/>
    </method>

    <method name="SetPlayerPosition">
      <arg name="position" type="x" direction="in"/>
    </method>

    <method name="SetPlayerMetadata">
      <arg name="metadata" type="a{sv}" direction="in"/>
    </method>

    <method name="SetSpeakOnMuteDetection">
      <tp:docstring>
        Enable or disable speak-on-mute detection.
      </tp:docstring>
      <arg name="enable" type="b" direction="in"/>
    </method>

    <method name="SpeakOnMuteDetectionEnabled">
      <tp:docstring>
        Get whether speak-on-mute detection is enabled.
      </tp:docstring>
      <arg name="enable" type="b" direction="out"/>
    </method>

    <method name="IsInternalCardDetected">
      <tp:docstring>
        Returns 1 if at least 1 internal audio card that is not HDMI audio
        card is detected. Returns 0 if no internal audio cards are detected.
      </tp:docstring>
      <arg name="detected" type="b" direction="out"/>
    </method>

    <method name="GetNumberOfNonChromeOutputStreams">
      <tp:docstring>
        Returns the number of active output streams,
        excluding those from Chrome and LaCrOS.
      </tp:docstring>
      <arg name="num_non_chrome_output_streams" type="i" direction="out"></arg>
    </method>

    <method name="GetNumberOfArcStreams">
      <tp:docstring>
        Returns the number of active streams from ARC.
      </tp:docstring>
      <arg name="num_arc_streams" type="i" direction="out"></arg>
    </method>

    <method name="SetForceBtHfpOffloadOnSupport">
      <tp:docstring>
        Sets true to always adopt BT HFP offload path while supported.
        Sets false to defer to the default setting of path selection.
      </tp:docstring>
      <arg name="enabled" type="b" direction="in"/>
    </method>

    <method name="GetBtHfpOffloadSupported">
      <tp:docstring>
        Returns true if BT HFP offload is supported.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="GetDSPOffloadSupported">
      <tp:docstring>
        Returns whether the given node supports CRAS DSP offload to SOF.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
      <arg name="supported" type="b" direction="out"/>
    </method>

    <method name="GetDSPOffloadState">
      <tp:docstring>
        Returns the current state of DSP offload on the given node.
        Caution: This method is for testing purpose.
      </tp:docstring>
      <arg name="node_id" type="t" direction="in"/>
      <arg name="state" type="i" direction="out"/>
    </method>

    <method name="DumpS2AsJSON">
      <arg name="data" type="s" direction="out"/>
    </method>

    <signal name="OutputVolumeChanged">
      <tp:docstring>
        Indicates that the output volume level has changed.
      </tp:docstring>
      <arg name="volume" type="i"/>
    </signal>

    <signal name="OutputMuteChanged">
      <tp:docstring>Indicates that the output mute state has changed.</tp:docstring>
      <arg name="muted" type="b">
        <tp:docstring>
          true if the system is muted by a system process, such
          as suspend or device switch.
        </tp:docstring>
      </arg>
      <arg name="user_muted" type="b">
        <tp:docstring>
          true if the system has been muted by user action such as the mute key.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="InputGainChanged">
      <tp:docstring>Indicates what the system capture gain is now.</tp:docstring>
      <arg name="gain" type="i">
        <tp:docstring>
          gain expressed in dBFS*100.
        </tp:docstring>
      </arg>
    </signal>

    <signal name="InputMuteChanged">
      <tp:docstring>Indicates that the input mute state has changed.</tp:docstring>
      <arg name="muted" type="b"/>
    </signal>

    <signal name="NodesChanged">
      <tp:docstring>Indicates that nodes are added/removed.</tp:docstring>
    </signal>

    <signal name="ActiveOutputNodeChanged">
      <tp:docstring>
        Indicates that the active output node has changed.
      </tp:docstring>
      <arg name="node_id" type="t"/>
    </signal>

    <signal name="ActiveInputNodeChanged">
      <tp:docstring>Indicates that the active input node has changed.</tp:docstring>
      <arg name="node_id" type="t"/>
    </signal>

    <signal name="OutputNodeVolumeChanged">
      <tp:docstring>Indicates the volume of the given node.</tp:docstring>
      <arg name="node_id" type="t"></arg>
      <arg name="volume" type="i"></arg>
    </signal>

    <signal name="InputNodeGainChanged">
      <tp:docstring>
        Indicates that the capture gain for the node is now.
      </tp:docstring>
      <arg name="node_id" type="t"></arg>
      <arg name="gain" type="i"></arg>
    </signal>

    <signal name="NodeLeftRightSwappedChanged">
      <tp:docstring>
        Indicates the left and right channel swapping state of the
        given node.
      </tp:docstring>
      <arg name="node_id" type="t"></arg>
      <arg name="swapped" type="b"></arg>
    </signal>

    <signal name="NumberOfActiveStreamsChanged">
      <tp:docstring>Indicates the number of active streams has changed.</tp:docstring>
      <arg name="num_active_streams" type="i"></arg>
    </signal>

    <signal name="NumberOfNonChromeOutputStreamsChanged">
      <tp:docstring>
        Indicates the number of active output streams,
        excluding those from Chrome and LaCrOS has changed.
      </tp:docstring>
      <arg name="num_non_chrome_output_streams" type="i"></arg>
    </signal>

    <signal name="NumberOfInputStreamsWithPermissionChanged">
      <arg name="num" type="a{sv}"></arg>
    </signal>

    <signal name="NumberOfArcStreamsChanged">
      <tp:docstring>
        Indicates the number of active streams from ARC has changed.
      </tp:docstring>
      <arg name="num_arc_streams" type="i"></arg>
    </signal>

    <signal name="HotwordTriggered">
      <tp:docstring>Indicates that hotword was triggered at the given timestamp.</tp:docstring>
      <arg name="tv_sec" type="x"></arg>
      <arg name="tv_nsec" type="x"></arg>
    </signal>

    <signal name="AudioOutputActiveStateChanged">
      <tp:docstring>
        Indicates active output state has changed.
        See IsAudioOutputActive for details.
      </tp:docstring>
      <arg name="active" type="b"></arg>
    </signal>

    <signal name="SevereUnderrun">
      <tp:docstring>
        Indicates severe underrun.
        Rate limited to 1 per 5 seconds.
      </tp:docstring>
    </signal>

    <signal name="Underrun">
      <tp:docstring>
        Indicates underrun.
        Rate limited to 1 per 10 seconds.
      </tp:docstring>
    </signal>

    <signal name="SurveyTrigger">
      <tp:docstring>Indicates an audio survey should be triggered.</tp:docstring>
      <arg name="properties" type="a{sv}"></arg>
    </signal>

    <signal name="SpeakOnMuteDetected">
      <tp:docstring>
        Signal that indicates voice activity is detected. This signal is only sent when all the following are true:
        (1) the system microphone is muted
        (2) voice activity detected
        (3) speak-on-mute detection is turned on with SetSpeakOnMuteDetection
        (4) there is an ongoing WebRTC usage.
        (5) this signal was not sent in the past 1 second
      </tp:docstring>
    </signal>
  </interface>

  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg name="data" type="s" direction="out"/>
    </method>
  </interface>
</node>
